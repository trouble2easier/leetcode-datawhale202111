class Solution {
public:
//桶排序的思路：所有的数，被分到可以存放t+1个数的桶，在同一个桶里，必然两者之差的绝对值小于等于t，相邻，计算是否小于等于t，不相邻，绝对大于t
//-1到-(t+1)分到桶-1
//0到t被分到桶0
//t+1到2t+1被分到桶1
//数x被分到桶seq
//if(x<0)seq=(x-t)/(t+1);
//else seq=(x)/(t+1);
//额外注意int越界问题
    bool  containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        int n=nums.size();
        unordered_map<int,int>sameheap;
        //桶排序
        long long w=t,x;
        w+=1;
        int pro_i=0;
        for(int i=0;i<n;i++)
        {
            x=nums[i];
            int seq=(x<0)?(x-t)/w:x/w;
            if(sameheap.count(seq))
            {
                return true;
            }else{
                sameheap[seq]=i;
                if(sameheap.count(seq-1)&&abs(nums[sameheap[seq-1]]-x)<=t)return true;
                if(sameheap.count(seq+1)&&abs(nums[sameheap[seq+1]]-x)<=t)return true;
            }
            if(i>=k){
                x=nums[pro_i];
                int ei=(x<0)?(x-t)/w:x/w;
                sameheap.erase(ei);
                pro_i++;
            }
        }      
        return false;
    }
};
